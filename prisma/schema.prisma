generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  picture          String         @default("img/profile_default.jpg")
  username         String         @unique
  password         String
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  posts            Post[]         @relation()
  comments         Comment[]      @relation("user")
  responseComments Comment[]      @relation("userResponse")
  userFriendship   Friendship[]   @relation("UserId")
  friendFriendship Friendship[]   @relation("FriendId")
  likes            Like[]         @relation()
  refreshToken     refreshToken[] @relation()

  @@map("users")
}

model Post {
  id          String    @id @default(uuid())
  description String
  userId      String
  image       String
  user        User      @relation(fields: [userId], references: [id])
  like        Like[]    @relation()
  comments    Comment[] @relation()
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("posts")
}

model Comment {
  id         String   @id @default(uuid())
  text       String
  userId     String
  postId     String
  responseId String
  user       User     @relation(fields: [userId], references: [id], name: "user")
  post       Post     @relation(fields: [postId], references: [id])
  response   User     @relation(fields: [responseId], references: [id], name: "userResponse")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("comments")
}

model Friendship {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], name: "UserId")
  friend    User     @relation(fields: [friendId], references: [id], name: "FriendId")
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("friendships")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model refreshToken {
  token   String @id
  expires Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@map("refresh_token")
}
