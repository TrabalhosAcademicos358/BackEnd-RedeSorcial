generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  username        String          @unique
  email           String          @unique
  name            String    
  password        String    
  photo_profile   String          @default("img/profile_default")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  fotos           Foto[]          @relation()
  comentario      Comentario[]    @relation("user")
  responseComent  Comentario[]    @relation("userResponse")
  userAmizade     Amizade[]       @relation("UserId")
  friendAmizade   Amizade[]       @relation("FriendId")
  curtida         Curtida[]       @relation()
  refreshToken   refreshToken[]   @relation()

  @@map("users")
}

model Foto {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  Comentario    Comentario[]  @relation()
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  curtida       Curtida[]     @relation()

  @@map("fotos")
}

model Comentario {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id], name: "user")
  foto          Foto      @relation(fields: [fotoId], references: [id])
  response      User      @relation(fields: [responseId], references: [id], name: "userResponse")
  fotoId        String
  userId        String
  responseId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("comentarios")
}

model Amizade {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id], name: "UserId")
  friend        User      @relation(fields: [FriendId], references: [id], name: "FriendId")
  userId        String
  FriendId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("amizades")
}

model Curtida {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  foto         Foto       @relation(fields: [fotoId], references: [id])
  fotoId       String        
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("curtidas")
}

model refreshToken {
  token          String     @id
  expires        Int
  user           User       @relation(fields: [userId], references: [id])
  userId         String

  @@map("refresh_token")
}