generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  username          String            @unique
  email             String            @unique
  name              String    
  password          String    
  photo_profile     String            @default("img/profile_default.jpg")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  photos            Photo[]           @relation()
  comment           Comment[]         @relation("user")
  responseComment   Comment[]         @relation("userResponse")
  userFriendship    Friendship[]      @relation("UserId")
  friendFriendship  Friendship[]      @relation("FriendId")
  like              Like[]            @relation()
  refreshToken      refreshToken[]    @relation()

  @@map("users")
}

model Photo {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  comment       Comment[]     @relation()
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  like          Like[]        @relation()

  @@map("photos")
}

model Comment {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], name: "user")
  photo         Photo       @relation(fields: [photoId], references: [id])
  response      User        @relation(fields: [responseId], references: [id], name: "userResponse")
  photoId       String
  userId        String
  responseId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("comments")
}

model Friendship {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], name: "UserId")
  friend        User        @relation(fields: [friendId], references: [id], name: "FriendId")
  userId        String
  friendId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("friendships")
}

model Like {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  photo        Photo        @relation(fields: [photoId], references: [id])
  photoId      String        
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("likes")
}

model refreshToken {
  token          String     @id
  expires        Int
  user           User       @relation(fields: [userId], references: [id])
  userId         String

  @@map("refresh_token")
}